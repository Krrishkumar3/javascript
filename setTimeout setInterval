function greetVIRATKOHLI() {
  console.log("Hello VIRATKOHLI");
}

setTimeout(greetVIRATKOHLI,5*1000);
setInterval(greetVIRATKOHLI,5*1000);

--------------------------------------------------------------------------------------

const initialArray = [3,6,9];

function logThing(str) {
  console.log(str);
}

initialArray.forEach(logThing);

--------------------------------------------------------------------------------------

const dog = {
  name: "doggie",
  legCount: 2,
  speaks: "bhow bhow", 
};

const cat = {
  name: "kitty",
  legCount: 4,
  speaks: "meow meow",
};

function printStr(animal) {
  console.log("animal " + animal.name + " has " + animal.legCount + " legs and says " + animal["speaks"]);
}
printStr(dog);
printStr(cat);

---------------------------------------------------------------------------------------

CALLBACK FUNCTION

function square(n) {
  return n * n;
}

function cube(n) {
  return n * n * n;
}

function sumOfSomething(a, b, callback) {
  console.log(a)
  console.log(callback)
  const val1 = callback(a)
  const val2 = callback(b)
  return val1 + val2
}

const ans = sumOfSomething(2, 3, cube)
console.log(ans)

-----------------------------------------------------------------------------------------

ANONYMOUS FUNCTIONS

function square(n) {
  return n * n;
}

function cube(n) {
  return n * n * n;
}

function sumOfSomething(a, b, callback) {
  console.log(a)
  console.log(callback)
  const val1 = callback(a)
  const val2 = callback(b)
  return val1 + val2
}

const ans = sumOfSomething(2, 3, function (n) {
                            return n * n * n;
})
console.log(ans)

--------------------------------------------------------------------------------------------

 ASYNCHRONOUS FUNCTIONS 

function findsum(n) {
  let ans = 0;
  for(let i = 0; i < 100; i++) {
    ans += i;
  }
  console.log(ans);
}
function findSumTill100() {
  return findsum(100);
}

setTimeout(findSumTill100, 5*1000);
console.log("hello world");

--------------------------------------------------------------------------------------------
